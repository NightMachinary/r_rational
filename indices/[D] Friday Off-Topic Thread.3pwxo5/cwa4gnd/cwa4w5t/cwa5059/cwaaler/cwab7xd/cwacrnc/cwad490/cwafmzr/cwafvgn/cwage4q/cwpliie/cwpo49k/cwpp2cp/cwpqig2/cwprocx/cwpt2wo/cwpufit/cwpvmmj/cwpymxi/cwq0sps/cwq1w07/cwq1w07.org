:PROPERTIES:
:Author: traverseda
:Score: 2
:DateUnix: 1446768563.0
:DateShort: 2015-Nov-06
:END:

#+begin_quote
  This is exactly what I'm trying to do, but I'm having trouble doing it because I can't tell what you're trying to accomplish.
#+end_quote

I do appreciate it.

--------------

Alright, I'll give it a shot.

Right now, file types are incompatible. You can't have a dedicated texture editor editing the textures in your 3D scene without complicated operations involving imports and exports.

It's also very difficult to extend already existing file types because many programs will crash if there's unexpected data. Say images in a text file, or a specularity channel in an image.

I think we should solve this by moving file type parsing down a level. Instead of each program coming up with it's own parser, we give it an API to access standard data structures.

Because the parser is standardized, we know it's not going to crash if someone adds an extra field. Unless the client program is programmed very poorly it can just ignore extra fields. An editor can ignore the "textures" attribute on an object, and just focus on the "meshes" attribute, or vice versa. If for some reason you need to extend a file format, you can just add a new attribute without rewriting all of the clients that use that object.

From that point, implementing a system similar to linux's inotify is pretty trivial and allows it to fit into a great number of use cases. Mostly involving shared editing of data, like google docs, but also filling a role in distributed computing and microservice frameworks.

--------------

I could also have led with this being a better IPC system for creating things like google docs and the like, but I think this is the stronger case.