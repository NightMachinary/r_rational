:PROPERTIES:
:Author: CouteauBleu
:Score: 4
:DateUnix: 1511606752.0
:DateShort: 2017-Nov-25
:END:

Weekly update on [[https://docs.google.com/document/d/1vIWf3Nqudgh18j4RK8bm4zOTSKUFl6l9Igvdg1adzGE/edit][The Tesseract Engine]], my ongoing game engine project.

--------------

I'm running out of clever ways to say "I haven't done anything, but I've planned to do things really hard. You know, in the future." If this continues, I might have to /actually do some work/ so I can actually have something to write here.

The most concrete work I have done recently is write Trello cards; two weeks ago, I said "I should probably make a plan before next week"; well, I skipped a week (more on that in a sec), but at least I am officially done with the planning phase!

I've also contacted a friend to ask him for help staying motivated and focused; my plan is to work on the project at least every Saturday for the next while; the arrangement would be "we have a visioconference every saturday morning where I explain to him what I intend to do that day/week, and a debriefing every saturday evening where I talked about what I've actually managed to do". So kind of like what I'm doing here, with the same pre-commitment flavor to it, but more focused and more personal.

--------------

My long term worry now is whether I can stay focused on the project long enough to actually achieve something.

The thing about developing a video game is, it's hard. Like, */really/* hard. If you, average person reading this sentence, were to try making a video game, even if you gave it an honest try, made an actual effort with the actual intention of making something good, you would probably produce something shitty and worthless (and I say that with a few years of experience seeing enthusiastic students produce shitty games, and not doing any better myself).

Same thing for making a game engine. It's a lot of work, and it's extremely complex. Now, the thing with coding complex systems is, it requires a sustained effort. You need to get into "the flow", where you can visualize enough parts of the problems and how they interact to build something that meaningfully addresses these problems; if you don't visualize them, you build flaws in your design that catch up with you sooner or later. You need to stay in that flow, not for hours, but for days or weeks or months.

Once your immersion is broken, all the mental architecture you've built is lost. You forget critical details that you didn't bother to write down, the notes you did write no longer make sense to you because they're based on assumptions you don't remember making, etc. You're not back to nothing, per se; you've still written some code; but you now have to do the same mental work of understanding the problem that produced the code in the first place (which is why people say that understanding someone else's code can be as hard as writing your own).

Now, if you're working in a company on the same problem every day, that's okay. It can be a pain in the ass to be asked to debug something you produced 6 months ago, but otherwise, you're unlikely to be interrupted before the project is over.

I'm a college student working living abroad and working on this project in my free time (which I'm lucky enough to have a lot of). I'll soon have semester exams; sometimes I get depressed like last week, and can't bring myself to work on anything (I'm asking a friend for help to hopefully work through those periods); I've let schoolwork pile up, and I'll need to address it at some point.

I'm not building up to a specific problem that I'm expecting. With some luck, it'll all be okay, and I'll just develop my project at a slow rate until I reach my two-months vacation in January, where I'll pick up the pace. But with that in mind... a lot of key parts of this project exist only in my brain so far, and that feels increasingly like a house of cards that could collapse at any moment.

I guess that just means I need to work sooner and faster.