:PROPERTIES:
:Author: zarraha
:Score: 4
:DateUnix: 1506796389.0
:DateShort: 2017-Sep-30
:END:

I'm assuming that by "deterministic" you mean that everyone starts in the same initial conditions and will propagate in the same direction, so everyone and everything will do the same things every week except as altered by your actions. Without the extra information, you would always make the exact same decisions and get the exact same result, but since every week gives you a different code, your behavior will be different, if only chaotically. This should mean that any decisions you make before seeing the bits should be identical in every loop, only deviating after you've looked. Thus, you can plan and create a protocol for sending and receiving messages in binary and be confident that every other version of you has come up with an identical plan.

My first plan is simple to implement, but has only monetary payout. Pick a lottery where you can pick numbers that resolves in less than a week, and create a 1-1 function that maps integers to lottery tickets. Each week, you buy lottery tickets based the length of the string, and if you win the lottery you exit the loop and are rich, if you lose you restart the loop and pick a 0, making the string one digit longer so in the next loop you will buy a different lottery ticket. You are guaranteed to win eventually since you'll go through every possible list of numbers, and the winning ticket should be the same every time.

If you want, you could do this with multiple lotteries, buying one ticket from each, and not exit the loop until you win all of them simultaneously, so long as you think you can you'll actually get paid despite an inevitable investigation that will occur.

Alternatively, you could use this as a protocol for trying any chanced event such as gambling at a casino, or spending a week in a random town trying to discover the love of your life, as long as you have well-defined criteria for how to vary your behavior based on the string length, and what counts as a success so you won't loop forever.

Alternatively, you could be more sophisticated and actually attempt to send messages to yourself. If you commit to a method for converting between text and binary, you could write questions for future yous to investigate, and then have them investigate and write an answer. If you spend N iterations writing out "What are the winning lottery numbers for PowerBall on [DATE]" then the next few people write out the answer since they'll know the answer at the end of the week. Even though every version of you would know the answer at the end of the week, even the ones asking the question, the question allows the you at the beginning of the week to know precisely what the numbers are referring to, and allows you to ask a second question after the first answer, and a third question, and so on. You'd probably want to include some form of error correcting in your binary encoding in case some version of you dies before learning the answer, or accidentally and chaotically changes the answer, but is forced to leave a 0 or 1 anyway.

Once you have an method of sending arbitrary messages back in time a week (so long as the messages are about reliable results that multiple versions of you can get consistent answers about) you can shortcut answers to any sort of scientific or social experiment, or stock market data, or prediction of events that resolve in a week. Find which stock has the biggest upswing (or downswing), find a method to convince a bank or investing company to commit to that stock (or shorting it) and giving you a cut, add that to your to do list for your final run. etc.