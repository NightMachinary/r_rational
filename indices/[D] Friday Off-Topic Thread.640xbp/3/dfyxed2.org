:PROPERTIES:
:Author: ketura
:Score: 4
:DateUnix: 1491594773.0
:DateShort: 2017-Apr-08
:END:

Weekly update on the [[https://docs.google.com/document/d/11QAh61C8gsL-5KbdIy5zx3IN6bv_E9UkHjwMLVQ7LHg/edit?usp=sharing][hopefully rational]] roguelike [[https://www.youtube.com/watch?v=kbyTOAlhRHk][immersive sim]] Pokemon Renegade, as well as the associated engine and tools. [[https://docs.google.com/document/d/1EUSMDHdRdbvQJii5uoSezbjtvJpxdF6Da8zqvuW42bg/edit?usp=sharing][Handy discussion links and previous threads here]].

--------------

Whoops, nearly missed this week's update.  Totally forgot it was Friday.

This is probably going to be a short, boring update--the first of several, I think, as I work on getting the skeleton of the framework together.  There's not much to comment on when it's a matter of “so yeah, I implemented requirements 1 through 6,” but I'll try and find interesting things to highlight and elucidate.

I have created the three repositories that I think need to exist, one each for XGEF, XGEF Mods, and Renegade itself.  I made them in Bitbucket, my hosting site of choice, but I've discovered that this basically restricts the number of people that have access to the private repositories to 5, including myself.  I actually have other projects with a close friend, so the real limit is three others besides myself. I don't /think/ this will be a problem for the foreseeable future, but in the event that it becomes an issue I'll migrate over to GitLab, I think.

--------------

First point of order is to create the System and Entity objects as they've been designed, and then implement the portion of XGEF that allows Systems to look for their associated Entity files. I am unsure of whether or not this file-crawling bit should be a moddable System itself or not, but I'm leaning towards making it its own thing.

Actually, now that I think about it, if I made it moddable, it would have to as a matter of course permit access to the file system for any arbitrary mod that extended it.  One of the limitations I want to include is what Space Engineers has done for their in-game scripting, namely having a whitelist of APIs that the code is permitted to access.  This won't stop a super dedicated hacker, but at least it will stop idiots from making a =rm -rf /= mod for funsies.

So I guess it /won't/ be a System.  Guess that answers that.

--------------

Speaking of Systems, I'm trying to come up with a better name for them.  Systems are essentially a single mechanic or aspect of the game, which will have associated configurations (Entities).  This can range in complexity, from a Stat system defining how the concept of stats works, to a Creature system defining what units are, to the WorldGeneration system that defines how worlds are created.

‘System' is a base library within C# and I don't like how potentially confusing that is.  Module is out, as that is too easily confused with Mod (I'm thinking I'll just call them Mods, and have it stand for both Module /and/ Modification).

Entity is taken.  Component will likely be used elsewhere (the Entity-Component system is a well-known structure, and we will be using it).  Procedure, Struct(ure), Process, and Schem(a) all have computer science meanings that get in the way.

Anyhoo, if you have any suggestions, I'd love to hear them.

--------------

This next week will be the week off in my 3 weeks on, 1 week off schedule that I now follow, so don't be surprised with radio silence next week.  I'm going to try spending some of it coming up with a simple exercise regime that I'm capable of following, as well as probably taking a look at fleshing out a Discord bot.

--------------

If you would like to help contribute, or if you have a question or idea that isn't suited to comment or PM, then feel free to request access to the [[/r/PokemonRenegade]] subreddit.  If you'd prefer real-time interaction, join us [[https://discord.gg/sM99CF3][on the #pokengineering channel of the /r/rational Discord server]]!  