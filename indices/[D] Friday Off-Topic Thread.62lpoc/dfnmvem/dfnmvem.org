:PROPERTIES:
:Author: ketura
:Score: 10
:DateUnix: 1490978351.0
:DateShort: 2017-Mar-31
:END:

Weekly update on the [[https://docs.google.com/document/d/11QAh61C8gsL-5KbdIy5zx3IN6bv_E9UkHjwMLVQ7LHg/edit?usp=sharing][hopefully rational]] roguelike [[https://www.youtube.com/watch?v=kbyTOAlhRHk][immersive sim]] Pokemon Renegade, as well as the associated engine and tools. [[https://docs.google.com/document/d/1EUSMDHdRdbvQJii5uoSezbjtvJpxdF6Da8zqvuW42bg/edit?usp=sharing][Handy discussion links and previous threads here]].

--------------

So I spent the last week working on finishing up the voxel exploration, and I think I've gotten what I need from it.

I realized shortly after last week's update that I had, somewhere along the line, messed up the arrangement of the chunks in the prototype.  All of them were hex-axis aligned, meaning that to move in a “column” of chunks, you actually moved diagonally, as in the gif I posted:

[[http://i.imgur.com/r7zSRLB.gifv]]

The chunks however need to be staggered in such a manner so that if the player moves straight up or down, they remain within the same column of chunks, like so:

[[http://i.imgur.com/xi53M9h.png]]

At some point I had reached the end of my math understanding rope and gotten [[/u/Xavion]] to help, which completely saved my bacon. In taking the new and improved math code, however, I completely failed to realize that the new chunks were now hex aligned and no longer offset (it was a trying time.  I was more focused on the fact that it worked /at all/ at that moment).

So most of my dev time this week was spent fixing the formulas to properly offset each row by half the chunk's width--most of that was spent with the variables in a spot that through sheer coincidence worked 90% of the way but failed in esoteric edge cases.  I /did/ eventually get it fixed, but ugh, it took far too long to track down.

At any rate, once I finally got the chunks organized properly, I was able to fairly quickly confirm (I think) that the cylinder wrapping won't work the way I'd like it to.  The idea was to make it so once you crossed the North Pole, the world would be flipped--imagine going from Russia to North America via the North Pole, you'd expect, if you kept moving south, for Canada to be “upside-down” from your perspective.

Ideally this would be faked by extending the map's vertical borders from the range “0 to Y” to “-Y to Y”, with a negative Y just being a reference to positive Y, and meaning that the player was facing south instead of north.  The map would handle the flipping or rotation smoothly, and all that would be needed is a single layer of buffer chunks that would be the north and south poles.

Unfortunately in practice I don't think this works out.  I had drawn up a few different mock ups in preparation for exploring this, and they had seemed to confirm that it would work, but alas.  There isn't any way (that I could find) to have the chunks be flipped vertically, preserve relationships between chunks, preserve relationships between hexes within the chunk, /and/ not result in some portion of the map having you drive north from Canada only to arrive back in Canada somehow.

Oh well.  It would have been nice, but I suppose I'll have to settle for having a torus-shaped world.  If anyone is able to work out the math and prove me wrong, however, please let me know!  It would be nice to have an almost-spherical 2D map.

--------------

And with that, I'll call /this/ prototyping phase done.  I didn't actually deliver working executables that contained everything I wanted, but I /did/ get the data I needed from each one, so...I guess that's a win?

Tonight I will be setting up the three repositories that we will need (XGEF Framework, Mods, Game) and start work on hashing out the specifics of the engine's design.  I've got a [[https://docs.google.com/document/d/1SlYaK6vZ0OmkQsuVOMCIOMb6nPIU9I1vKMTFMEL0Wk8/edit?usp=sharing][50 page design document]] to work off of, better understanding of some of the more finicky bits, and the support of a very helpful following.  

Guess it's time to get this show on the road.

--------------

If you would like to help contribute, or if you have a question or idea that isn't suited to comment or PM, then feel free to request access to the [[/r/PokemonRenegade]] subreddit.  If you'd prefer real-time interaction, join us [[https://discord.gg/sM99CF3][on the #pokengineering channel of the /r/rational Discord server]]!  