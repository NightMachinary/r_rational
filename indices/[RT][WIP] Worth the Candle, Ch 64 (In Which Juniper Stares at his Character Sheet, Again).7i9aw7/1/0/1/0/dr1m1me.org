:PROPERTIES:
:Author: derefr
:Score: 5
:DateUnix: 1512927518.0
:DateShort: 2017-Dec-10
:END:

That's one possibility.

I think the important thing to figure out, really, is what exclusion /zones/ do. I'll examine them through the lens of the nuclear-weapons exclusion zone, because that's a pretty vivid example. They're either:

1. simple barriers that do a no-op rewrite on your soul, updating anything that passes through them to the latest rules (so you could create a nuclear weapon outside of the nuclear exclusion zone; you just can't take one from inside it to outside it, or vice-versa---and perhaps, if it erases knowledge of nuclear engineering as well, and all the engineers are currently inside, then this is "enough" to contain nuclear weapons. No telling how that interacts with teleportation or creation-domained artifacts, though!)

2. an area where nothing happens, while everywhere outside the zone a version-migration is applied to souls, automatically updating them to the latest rules, but just the once (which /should/ mean that there can only be one exclusion zone at a time, because creating zone B would migrate everyone in zone A and thus make zone A into regular space---so that's obviously not true.)

3. an area where souls /who were in that area when the zone was established/ are now permanently locked to a given rules version, but where this effect ceases to apply when they leave the zone. (This should mean that nuclear weapons could be transported outside of the nuclear zone... unless the weapons, or radioactive materiel itself, has a soul that can be rewritten. This should /also/ mean that each given zone still lets its member souls do /everything/ that you could do when the zone was first created, meaning that there are /multiple/ zones where nuclear weapons work. Which may or may not be true, depending on whether anyone has ever independently re-invented nuclear enrichment processes /et al/ outside of the nuclear exclusion zone.)

4. a [[https://en.bitcoin.it/wiki/Softfork][soft fork]]. Imagine that Aerb's world-simulation runs on a computer cluster, sharded [in the database sense, not the MMO-game sense] by player location, such that when you move from one MMO "zone" to another---when you walk to a different area such that in a regular MMO you'd see a loading screen and spawn in afresh---your data could, transparent to all detection, be being passed off from one computation-node of the world-sim to another. Each computation-node would own a given set of zones---places---and would also own the set of souls of any/all "server-side NPCs" that were spawned by code embedded into those zones†. Now imagine that some nodes will disagree about what soul-updates obey the rules. When a character passes from one zone to another, and thus one /node/ to another, their soul is either copied across or stays in a separate central database; but either way, the new node will accept the character's soul without checking it for validity with its own local rules. Under this logic, an exclusion zone exists on /two/ levels. On a physical in-sim level, it's an auto-update-inducing barrier ala case 1, or a set of physical wards; but on an essentialist level, it's also a rewrite of the update validity rules on every node except one.

I favour case 4, because it would imply the lowest-powered world, consistent with what has been described: one where excluding Foo /and then/ excluding Bar, ends up with people in the Foo zone who can do Foo but not Bar, /and/ people in the Bar zone who can do Bar but not Foo.

It's also a fun little bit of worldbuilding if true: I would guess that it works like "the person doing the update can't update the node they're currently in"---maybe because of some sort of mutex held by the current node doing an update to the soul database or something. (I'm not sure why they couldn't just do the update twice from two different places, though. Maybe, similar to teleport key cooldown, there's an arbitrary game-level rule preventing the same ability from being re-adjucated more than once per hundred years?)

† This is necessary for the soft-fork case to be capable of protecting the woman with shadow clones from having her shadow-clones get updated out of existence when they travel. If the shadow-clones are "pure NPCs"---just game-level scripts that run on each physics-frame, like the golem monsters in the prison---then they might /always/ be simulated by the same node that originally spawned them, to prevent exactly the case where they pass into another zone that has been updated to not have the relevant game-level code and thus wink out of existence at the zone border. Instead of passing the NPC between zones as happens with souled entities, [[https://en.wikipedia.org/wiki/Proxy_pattern#Remote_Proxy][remote proxy objects]] might be passed instead, where when zone X wants to know the current state of NPC Y#100156, it queries the proxy-object, which makes an RPC call back to zone Y to get the answer. This would also explain why there's one (the "original", souled-entity instance of the woman) who must stay in the exclusion zone.