:PROPERTIES:
:Author: derefr
:Score: 42
:DateUnix: 1512697370.0
:DateShort: 2017-Dec-08
:END:

#+begin_quote
  I'm bit confused as to why Deception kept him from leaving the interface if it never showed up as an error until now.
#+end_quote

The key is the use of the word "deprecated" in the soul UI, in reference to excluded abilities.

In software-engineering terms, a /deprecated/ API function is one that will still be provided for the time being, because existing software is still using it and the creator of the library/component doesn't want to break all that software by immediately removing the function---but where it is recommended that /new/ software should not use the function.

Usually this is just a documentation thing: either the docs describing the API say to not use the function; or at most calling the API function produces a warning, but still works. The point is to allow developers of software that uses this library time to move away from the deprecated function, so that, once they eventually /do/, you can remove it for good.

But, in environments like App Stores where binaries go through an automated verification step before being centrally released by the platform-owner, deprecation can actually mean something stronger: that while existing /published releases/ of the software on the platform may continue to rely on the deprecated API, newly-submitted-for-approval releases of the software won't be published by the platform-owner if they contain calls to the deprecated API.

This is what happened here, I think: Joon tried to "publish" a revised version of his soul to the world-computer, and it rejected the new version as having since-deprecated functionality in it. His soul was fine up until that point, because it hadn't had to go through that submission process.

Picture opening a Word 97 document in Word 2016. It "imports" when you first open it, and Microsoft's desire for backwards-compatibility will even ensure that all the old /deprecated/ Word 97 features continue to work. But if you go to save it, it'll ask whether you want to save it in Word 97 format, or in Word 2016 format. And if you save it in Word 2016 format, it'll strip out all the since-deprecated Word-97 data within the document.

So let's say someone made Joon's character using a very old version of a "character-sheet editor", that exported files in a very old character-sheet format. They then used some low-level functionality to directly import this character-sheet into Aerb, bypassing both the kinds of checks that would be done if the character was newly created, and also the kinds of global modifications to /all/ characters/souls that would be done when a world-database version-migration (i.e. an exclusion) is applied to Aerb.