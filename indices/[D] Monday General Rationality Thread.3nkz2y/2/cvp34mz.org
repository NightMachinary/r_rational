:PROPERTIES:
:Author: traverseda
:Score: 5
:DateUnix: 1444065207.0
:DateShort: 2015-Oct-05
:END:

So, I have some complaints about how software is done. I'm a big proponent of the unix way, but I think it falls apart these days, for a number of reasons.

- You can't simultaneously edit files.

Sure, back when programs were pipe-able it worked great. But these days a lot of what we do involves live visualization. Think image editing. All of your filters have to be built into your graphics program, or become annoyingly cumbersome.

We've broken the whole "write one program that does one thing well" in favour of monolithic programs that do live interaction well.

- Flat text data structures are bad

Alright, maybe no bad, they're good for a lot of things. But imagine a 3D scene, like blender. It's composed of a number of sub formats, meshes (stl's), csg data, textures (png's), scene positioning, etc.

These are complex datastructures made up out of simple blocks, but they don't typically show those simple datastructures without a cumbersome export/import loop.

--------------

I propose a solution where, essentially, a state synchronized data tree replaces the file system. You subscribe to objects, and are alerted whenever they change.

We implement something a lot like FUSE on top of that. So your png can appear to be an non-compressed n-dimensional array.

Any of the other hundred or so software developers have any thoughts? Anywhere where I should clarify?