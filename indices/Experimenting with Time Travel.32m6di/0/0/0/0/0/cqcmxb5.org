:PROPERTIES:
:Author: pastymage
:Score: 8
:DateUnix: 1429059548.0
:DateShort: 2015-Apr-15
:END:

#+begin_quote
  Novikov
#+end_quote

[[http://en.wikipedia.org/wiki/Novikov_self-consistency_principle]]

If you like. Most of those "device accidentally activates" results seem like more than 1-100 odds (particularly if you're keeping an eye out for them and taking countermeasures, Final Destination style). Commit to rigging the device to activate based on the results of a random number generator, but not the specifics. Wait for a flash. Set the RNG trigger to activate the device only if it returns 50 (with a range of 1-100). Wait. Expect to get a 50. Should work every time, even with repeated runs.

Extend this to useful engineering. Take some process that, on average, produces a bell curve of output amount or quality, like nanotube manufacture. Commit to rigging the machine to the result of one production run, but not the details of the rigging. After a flash, set the machine to activate only if the results are a few sigma right of center...possible, but not common. Wait. Now you've vastly increased the efficiency of a probabilistic manufacturing/chemistry reaction, because you can do this repeatedly (at least, for processes that can be completed within the time window of a pre-flash). It may not save you time (ha), since you have to wait for a flash and that delay may follow the same original bell curve (does it?), but it should save you materials costs since you only "realize" the best possible runs.