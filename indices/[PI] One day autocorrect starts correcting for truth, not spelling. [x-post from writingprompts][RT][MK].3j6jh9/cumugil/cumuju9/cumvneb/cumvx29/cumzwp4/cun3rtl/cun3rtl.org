:PROPERTIES:
:Author: Anderkent
:Score: 3
:DateUnix: 1441123189.0
:DateShort: 2015-Sep-01
:END:

There are obviously some pairs {n,X} where this encoding is good. Trivially, sending the first n digits of pi is very efficient :)

However as a general encoding I expect this is inefficient. Consider: compression works by a tradeoff; messages of a particular type can fit in a small amount of data, but messages not fitting that type take more data than raw information. You cannot transmit more than a bit of information per bit of data on average, but you can change how much information particular messages take, paying it off by making representations of other messages more lengthy (with hopes that the other messages are never going to be sent).

This is why random data is not compressible, by the way: because there's no pattern to the messages, you cannot 'shift' the data cost in any meaningful way - you're just as likely to hit the messages you made cheaper as the ones you made more expensive.

It's reasonable to assume index within pi as a compression algorithm doesn't optimise for human messages; it doesn't shift the data cost from messages we're likely to send to ones we aren't. I'm pretty sure you could prove this formally but this comment is too small to contain it. As such, you expect the representation of the average message to be longer than the actual message.