:PROPERTIES:
:Author: daytodave
:Score: 5
:DateUnix: 1622135573.0
:DateShort: 2021-May-27
:END:

So I don't want to pretend I super understand it, and I wrote all my comments last night while high af, but my armchair understanding is that writing perfect, infallible antivirus software is [[https://www.google.com/url?sa=t&source=web&rct=j&url=https://www.cs.virginia.edu/%7Eevans/pubs/virus.pdf&ved=2ahUKEwi1-aTXqurwAhV3AZ0JHYa3AtIQFjAAegQIAxAC&usg=AOvVaw2IYhc2g175hIFZ7JdT5gEw][impossible]], and that the reason why that's true is because the [[https://en.m.wikipedia.org/wiki/Halting_problem][Halting Problem]] is provably undecidable:

#+begin_quote
  In computability theory, the halting problem is the problem of determining, from a description of an arbitrary computer program and an input, whether the program will finish running, or continue to run forever. Alan Turing proved in 1936 that a general algorithm to solve the halting problem for all possible program-input pairs cannot exist.

  For any program f that might determine if programs halt, a "pathological" program g, called with some input, can pass its own source and its input to f and then specifically do the opposite of what f predicts g will do. No f can exist that handles this case. A key part of the proof is a mathematical definition of a computer and program, which is known as a Turing machine; the halting problem is undecidable over Turing machines. It is one of the first cases of decision problems proven to be unsolvable. This proof is significant to practical computing efforts, defining a class of applications which no programming invention can possibly perform perfectly.
#+end_quote

In other words, one of the "this must be true or else we are irredeemably fucked anyway" assumptions the kids can probably make is that not even Crayak could make a platform that can be absolutely certain a given simulation is safe to run. I'm wondering if Toomin incorporated this into his strategy when planting his "ghosts in the machine".