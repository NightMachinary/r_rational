:PROPERTIES:
:Author: ketura
:Score: 14
:DateUnix: 1505498289.0
:DateShort: 2017-Sep-15
:END:

Weekly update on the [[https://docs.google.com/document/d/11QAh61C8gsL-5KbdIy5zx3IN6bv_E9UkHjwMLVQ7LHg/edit?usp=sharing][hopefully rational]] roguelike [[https://www.youtube.com/watch?v=kbyTOAlhRHk][immersive sim]] Pokemon Renegade, as well as the associated engine and tools. [[https://docs.google.com/document/d/1EUSMDHdRdbvQJii5uoSezbjtvJpxdF6Da8zqvuW42bg/edit?usp=sharing][Handy discussion links and previous threads here]].

--------------

So you know what I'm sick of rewriting?  Stats.  I think I'm on the fourth iteration; balancing flexibility, usability, and maintainability has turned out to be a huge pain in the ass.  This past weekend I actually found that saving the actual core field as =dynamic= was unnecessary; for the handful of cases where I needed math within the generic type, I could just /cast/ to dynamic instead.  This allowed me to cut back on the amount of runtime-only risks quite a bit, but it did require rewriting /again/.

Still, I think that stats are finally more or less solidified. I'll probably end up rearranging some of the fields a bit more in the future, but nothing on the scale of going back to the drawing board (I hope).  

I got a basic serializer working and using it toyed around with the Species and Unit classes a bit.  For those in the dark, a serializer is a means of translating in-memory data into a different form.  In my case it's transforming it into Json, which is human-readable and will be the primary means of modding: if you want to make all Charizards OP, just open up Charizard.json and crank the stats way up.  Due to the large amount of data this game will use, I imagine that most modding will be in that form, either adding or modifying Pokemon or other items.

As I got the serializer working, I found that the first true Systems needed to be set up properly.  System (capital S) in XGEF has a special meaning: a System has control over a particular domain, whether it be as far-reaching as a WorldSimulationSystem or as humble as the StatSystem which just keeps track of what kinds of stat exist.  Systems come in two halves, a CoreSystem and a ModdedSystem.  The dual nature of the beast requires that it be built in three parts (how's that for a plot twist), but ultimately means that part of the System comes pre-made and ready to go, while the rest is fully moddable.

As of last night I have the StatSystem all set up and divided in this manner, and with it I've developed some simple templates and conventions that will make future Systems easier to create.  

For combat to be a thing, I'll need at least rudimentary versions of the following Systems:

- =Stat System= (contains a registry of different stats that can be used by units)

- =Species System?= (similar registry for Species)

- =Unit System= (for now just a factory that knows how to take a given species and spawn a unit of the appropriate type)

- =World System= (handles the simulation of the world, which for the combat sim comes down to moving units where they say they want to go)

- =Action System= (units use this to report what it is they want to do, and the ramifications are played out by this system)

- =Combat System= (acts as a layer between player/unit or AI/unit, restricting the available actions according to the game design.  For instance, you can't move if you're dead, and you can't breathe fire if you're exhausted, that sort of thing.)

And no doubt I'll trip upon a couple other things that I'll need as I continue to iterate.  

Anyway, that's it for this week.  My focus for next week will be split between getting very basic versions of all the systems ready, ensuring it works with the existing mod loader, and attempting to set up unit tests for things like the serializer and mod loader.  

--------------

If you would like to help contribute, or if you have a question or idea that isn't suited to comment or PM, then feel free to request access to the [[/r/PokemonRenegade]] subreddit.  If you'd prefer real-time interaction, join us [[https://discord.gg/sM99CF3][on the #pokengineering channel of the /r/rational Discord server]]!  