:PROPERTIES:
:Author: ketura
:Score: 10
:DateUnix: 1503681432.0
:DateShort: 2017-Aug-25
:END:

Weekly update on the [[https://docs.google.com/document/d/11QAh61C8gsL-5KbdIy5zx3IN6bv_E9UkHjwMLVQ7LHg/edit?usp=sharing][hopefully rational]] roguelike [[https://www.youtube.com/watch?v=kbyTOAlhRHk][immersive sim]] Pokemon Renegade, as well as the associated engine and tools. [[https://docs.google.com/document/d/1EUSMDHdRdbvQJii5uoSezbjtvJpxdF6Da8zqvuW42bg/edit?usp=sharing][Handy discussion links and previous threads here]].

--------------

Work has begun!  Tho not with a bang but a whimper.  In Discord a while back I decided that the best two candidates to begin work on were the combat system and the map system.  Since both of these utilize the end product of the other without being a dependency per se, it seems like it will be nice to have a couple of different things that I can move back and forth on as my motivation sees fit.

That said, I decided to start with combat since that's ultimately the part of this game that is the most attractive to me.  As I pondered what first to tackle, I thought units would be the first thing, as I figured that units would perform actions that would ultimately affect other units.  As I drilled deeper, I realized that the stat system is probably a good place to being--not flashy, but really what is a unit but a bundle of stats?  

I at first thought that I would start with a sort of hybrid integer/decimal stat class that would act like an integer for most intents and purposes, but would behind the scenes be a fixed-point decimal.  This would allow for incremental increasing of a stat without being plagued by the infamous floating-point errors that are the source of many a programmer's headache.  As I discussed it on Discord, however, it was brought to my attention that stats are an XGEF-level concept, i.e. not just for Renegade.  Once I thought about this, I realized that, while the hybrid stat is useful (and will still be implemented), I need to support other kinds of stats, for modders if nothing else.

I started designing the most core classes during my spare time at work in a standard text editor, only to discover once I had gotten home and attempted to compile my sketchy code that some of the assumptions I had made were unfounded.  Long story short, I am unable to represent numeric stats in a fully generic fashion, which means that each basic numeric type of stat needs to have its code, well, hand-coded.

This was unacceptable to me, so I began to explore other options and in so doing stumbled upon meta-programming via code templates.  Basically I can write a program in a sort of bastard child of C# and XML that generates code for me in a powerful (but arcane) manner.  So I have written (and mostly finished) a code template that generates one stat wrapper per numeric type in C#, all eleven of them.  The code I had to write was only about 300 lines (probably the size that two hand-coded stat types would be), and the generated code is somewhere close to 5,000 lines.  

I'm actually quite impressed with what metaprogramming lets me do, and I will certainly be utilizing it in the future as another tool in the toolbox.  I am, however, /less/ impressed with the ease of use--for instance, the code templates have neither autocomplete nor even syntax highlighting, so it feels like 2002 again, coding in notepad.exe.

Still, the flexibility it gives me is undeniable. Should I find that some aspect of these 11 classes needs to change, it's simply a change in one part of one file, instead of spread out through 11 very similar ones.  

Anyway.  Those basic building-block stat wrappers will be complete soon, and upon them I'll build the hybrid stat, EVs, and other more high-level stat concepts.  Once that's complete I have a basic unit as soon as I throw a bunch of stats together.

--------------

If you would like to help contribute, or if you have a question or idea that isn't suited to comment or PM, then feel free to request access to the [[/r/PokemonRenegade]] subreddit.  If you'd prefer real-time interaction, join us [[https://discord.gg/sM99CF3][on the #pokengineering channel of the /r/rational Discord server]]!  