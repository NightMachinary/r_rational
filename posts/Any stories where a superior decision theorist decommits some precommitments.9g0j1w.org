#+TITLE: Any stories where a superior decision theorist decommits some precommitments?

* Any stories where a superior decision theorist decommits some precommitments?
:PROPERTIES:
:Author: chlorinecrown
:Score: 14
:DateUnix: 1537007632.0
:END:
​

[[https://preview.redd.it/tvr0nj3sqdm11.jpg?width=640&format=pjpg&auto=webp&s=fd38c44060b6422c4f2a196909d0f95cea45db80]]

I just saw this meme and tried to think of good examples and none sprang to mind. I'll keep thinking and edit this post if I think of any.

My mind kinda got stuck on Significant Digits, but that's more a case where HJPEV uses magic to heavily augment his precommitment powers to awesome effect.


** [[http://slatestarcodex.com/2017/02/27/a-modern-myth/][A Modern Myth]] by Scott Alexander is what immediately sprang to mind. In this example, Prometheus is decommitting Hermes' precommitment.
:PROPERTIES:
:Author: throwaway11252016
:Score: 18
:DateUnix: 1537115578.0
:END:

*** Nailed it
:PROPERTIES:
:Author: chlorinecrown
:Score: 2
:DateUnix: 1537119064.0
:END:


*** yeah, this scene is one of my favorites
:PROPERTIES:
:Author: tjhance
:Score: 2
:DateUnix: 1537122398.0
:END:

**** As an aside, f*** eagles.
:PROPERTIES:
:Author: BlackKnightG93M
:Score: 3
:DateUnix: 1537195788.0
:END:


** I don't really understand how you can decommit someone else's precommitments, I just read this as a joke?
:PROPERTIES:
:Author: Flashbunny
:Score: 9
:DateUnix: 1537021058.0
:END:

*** I do think decommiting is generally harder than precommiting, such that a C rank precommiter would need an S rank decommiter to defeat them. (Gwern only has to hash his precommitment, EY would need to come up with some kind of novel backdoor in the hash function to win)

​

In the classic example, imagine a game of chicken. Players speed towards each other in cars, and the first one to swerve loses. Obviously, if no one swerves, you both lose really hard.

​

You can win by being the first one to throw your steering wheel out the window, credibly precommiting to not swerving, forcing your opponent to do so or die.

​

Your opponent, the superior decision theorist, might predict this and reinforce your steering wheel somehow to make it so you don't have that option available to you.

As far as I can tell the general cases of decommiting someone's precommitment are

1. Take away their ability to signal precommitment (reinforce their steering wheel)
2. Make it too expensive for them to uphold their precommitment (place their favorite person in the way of the car before they have a chance to throw away their steering wheel)
3. Make it very cheap for them to defect from their commitment (fill their car with free steering wheels that snap right on and work perfectly)

​

But I'm no decision theorist and I haven't spent that much time on this.
:PROPERTIES:
:Author: chlorinecrown
:Score: 31
:DateUnix: 1537021852.0
:END:

**** When I saw the comment, my mind jumped to trying to play the inferior opponents' precommitments against each other such that they're forced to choose between them. For examples, we might look to fantasy stories involving Fae who must keep to the letter of their word. Something along these lines has probably happened in some tale before.
:PROPERTIES:
:Author: hyphenomicon
:Score: 15
:DateUnix: 1537038027.0
:END:

***** Cú Chulainn comes to mind. His downfall was being forced to pick between violating his geas against eating dog meat or violating the taboo of refusing hospitality.
:PROPERTIES:
:Author: akaatnene
:Score: 28
:DateUnix: 1537042047.0
:END:

****** Damn, that's a good one.
:PROPERTIES:
:Author: Detsuahxe
:Score: 4
:DateUnix: 1537099000.0
:END:


****** He should have just chewed on it to drink the juices for nourishment, and then spat the dog meat out so he didn't actually eat any.
:PROPERTIES:
:Author: Flashbunny
:Score: 1
:DateUnix: 1537377410.0
:END:

******* Is partial acceptance of hospitality not partial refusal?
:PROPERTIES:
:Author: kcu51
:Score: 1
:DateUnix: 1537398041.0
:END:


****** What story is that from?
:PROPERTIES:
:Score: 1
:DateUnix: 1537181997.0
:END:

******* Irish mythology.
:PROPERTIES:
:Author: TrebarTilonai
:Score: 9
:DateUnix: 1537200311.0
:END:


**** Many thanks for the explanation.
:PROPERTIES:
:Score: 1
:DateUnix: 1537181965.0
:END:


**** If I understand your explanations properly, I don't see why a "superior" decision theorist is required to decommit your precommitments.
:PROPERTIES:
:Score: 0
:DateUnix: 1537215090.0
:END:

***** I guess in the two examples here, ruining someone's hash and tampering with the car, it's easier for the precommiter to win, but I'm open to the idea that there are situations where precommiting is super hard and foiling that is super easy, I just can't readily think of any examples.
:PROPERTIES:
:Author: chlorinecrown
:Score: 2
:DateUnix: 1537230134.0
:END:


** Almost any broken promise would count.

Even mentioning it in this thread is a spoiler if you haven't read all of Yudkowsky's short stories already, but I think (title) three world's collide has pretty much this exact scene (of one character making a pre-commitment (bigger spoiler)on behalf of his spaceship crew and humanity as a whole, and a character which could reasonably be considered a superior decision theorist forcing him to break that pre-commitment (biggest spoiler) via mutiny
:PROPERTIES:
:Author: eroticas
:Score: 7
:DateUnix: 1537069408.0
:END:


** In the meme, I think decommiter EY would have to have previously credibly convinced Gwern that that hash protocol does anything when it secretly just outputs a random sequence.
:PROPERTIES:
:Author: chlorinecrown
:Score: 6
:DateUnix: 1537008157.0
:END:

*** Just find a different interesting string that hashes to the same value.
:PROPERTIES:
:Author: Charlie___
:Score: 2
:DateUnix: 1537042753.0
:END:

**** The entire point of hash functions is that this is Not Easy.
:PROPERTIES:
:Author: CCC_037
:Score: 8
:DateUnix: 1537086801.0
:END:

***** Just need to do hashes 10^{55} times faster than the bitcoin mining community :) Maybe being a superior decision theorist starts with building a Dyson sphere.
:PROPERTIES:
:Author: Charlie___
:Score: 5
:DateUnix: 1537127288.0
:END:

****** [[/rarityreally][]] If you can do hashes 10^{55} times faster than the bitcoin mining community, then you probably have better things to do than invalidating a single precommitment hash.
:PROPERTIES:
:Author: CCC_037
:Score: 5
:DateUnix: 1537128019.0
:END:


** What does it mean to "decommit your precommitment"?
:PROPERTIES:
:Score: 4
:DateUnix: 1537181865.0
:END:


** The waves arisen has an example of precommitment in the final fight of the series.
:PROPERTIES:
:Author: TWOA1998
:Score: 3
:DateUnix: 1537019559.0
:END:


** I think EY is just shitposting
:PROPERTIES:
:Author: akaltyn
:Score: 3
:DateUnix: 1537370825.0
:END:

*** When you say that, do you think that decommiting precommitments is impossible, or it's an impossible concept, or it's so unusual it's not worth looking for?
:PROPERTIES:
:Author: chlorinecrown
:Score: 1
:DateUnix: 1537376895.0
:END:


** (Does it count as a precommitment if you can choose whether or not to reveal at all? What about having two keys which give oppisite messages when used on the same thing, or two opposite messages with the same hash..?)
:PROPERTIES:
:Author: MultipartiteMind
:Score: 2
:DateUnix: 1537011652.0
:END:

*** The main problem with obfuscated precommitments is that the predictor can simply reveal correct predictions and pretend incorrect ones haven't come to pass yet. Unless the predictor provides a concrete deadline for their prediction to come true, I think the best policy is to simply treat obfuscated predictions as falsified until proven otherwise.

Hash/encryption functions are designed to make finding collisions effectively impossible. If you were able to find a collision like you describe, that would be proof that the function in question was insecure.
:PROPERTIES:
:Author: imyourfoot
:Score: 3
:DateUnix: 1537044289.0
:END:

**** 'Until proven otherwise': in the sense of exhaustively shown that >50% of all similar predictions made by the same person before the time of that prediction were true? (Rather than prediction-by-prediction, because before revelation a prediction isn't known to be falsified, and afterwards there's the problem mentioned.)

Hmm. I should learn more about how encryption functions work in practice. ...Perhaps if there were 50 characters each time, location of a message randomised (with other parts staying noise), and so having potentially multiple messages in the same thing--but that then immediately throws up a red flag of 'why do that if not to hide multiple messages'. ...and now I find myself thinking about Asimov's Foundation series, except with Seldon spending hours and hours recording all sorts of silly messages about all sorts of situations that could develop (to be picked between... though direct fabrication by the Second Foundation when wanting to give a nudge would be even more plausible, if less appealing...)...
:PROPERTIES:
:Author: MultipartiteMind
:Score: 1
:DateUnix: 1537449628.0
:END:

***** I meant 'Until proven otherwise' on a case by case basis. You're right that that strategy will identify correct predictions as incorrect until the poster reveals the unhashed prediction. On the other hand anyone who's posting precommitment hashes is clearly interested in having people know they made a correct prediction, and if a lot of people followed this strategy it would give the precommitters a strong incentive to include a deadline, circumventing the problem.

I suppose malicious precommitters could give unnecessarily long deadlines and hope people forget the precommitment by the time it comes around. One strategy against that would be to discount the value of any prediction posted with an excessively long deadline, as compared to the content of the prediction.

Any decent encryption function will have the following properties (and these are insufficient to qualify as 'decent' by themselves):

1) You can't predict anything (except the length) about the output of the function given a particular input without actually running the function.

2) You can't recover the input from the output, nor can you recover any information (except the length) about the input.

3) If you know a given input X and a given output f(X), there is no way to modify X to produce Y that will give you any information about f(Y) without actually executing the function. Equivalently, flipping any non-zero number of bits in an input will statistically result in 50% of the output bits also being flipped.

The combination of those means that there's no way to generate messages with equal hashes besides brute force, which is completely inysfeasible given the size of the keyspace.
:PROPERTIES:
:Author: imyourfoot
:Score: 1
:DateUnix: 1537493501.0
:END:

****** (The 'on a case by case basis' is worrying in regards to whether something could be treated as a correct prediction rather than a coincidentally-true random statement; deadlines sound good!) Might there be a convenient way--blockchain incorporation?--to prove/set-in-rock dates of cyphered revelation, claimed deadline (both the deadline itself and the date on which claimed), and uncyphered revelation? --Even then, though, there's the issue of someone making lots of hidden claims that no one can see or know about, then unhiding coincidentally-true ones and saying "Look! You all remember back when I shared this cyphertext, don't you? See how it satisfies the deadline exactly!" Ah, but (systems in which such hiding and unhiding for a single identity is impossible aside) perhaps that could be dealt with by people only giving credence to cyphertexts and deadlines which they themselves saw and locally recorded at time of publishing..? Potentially problematic in the burden put on people to aggregatedly record lots of untrusted claims, else being unable for their claimers to ever start accruing trust? Perhaps if there were a few aggregation companies/organisations, working with large numbers of claimers to record, check, and laud-where-notable claimers, with each claim and deadline available for local saving, such that others can rely on the corruptible process to get an idea of what others view as trustworthy, then locally follow for verification to stop corruption... as long as the deadline reminders are local too, and aren't from an outside organisation... there could still be corruption, granted, in that such organisations could just not laud or stop lauding certain claimers if the claimers' positions (especially if consistently correct) were inconvenient for the organisations' backers. There's also the risk, unless each each lauded claimer's claims and deadlines are stored from the claimer's own site rather than the aggregation site, of a man-in-the-middle falsification of a claimer's claim, though catchable if anyone who would have been fooled checked the cyphertext on the two sites against each other when locally storing (which in any case requires the option of storing from the claimer's own site). Hmm.

​

("Equivalently, flipping any non-zero number of bits in an input will statistically result in 50% of the output bits also being flipped.": This sentence makes me happy.)

​

Current impression: upon a decryption deadline, rather than give a reader a key and let them decrypt cyphertext to get the input, one gives the reader the input (and a key, or otherwise making sure they already had the encryption function--presumably a key necessary, else short cyphertexts could be brute-forced by guessing plausible short sentences, particularly if the claimer's specialty is known?), and let's them check that the provided input gives the same hash as previously shown. As such, the 'cyphertext/hash' can have less information complexity than the input? (Edit: Or was 2.'s "You can't recover the input from the output" intended to mean "...without actually running the decryption function" as in 1.? )

​

(*reads a little about public and private keys* ...if one can have two arbitrary entities which want to privately communicate using each other's public keys with their own private keys and never having any sharing-private-key moment of potential interception, this is astoundingly reassuring... O.O (Other than of course the [[https://xkcd.com/538/][xkcd.com/538/]] approach and its issue of being able to follow back where signals are coming from--particularly if assuming that some utterances normally have to be readable by everyone, for conversations/trades to start in the first place.))
:PROPERTIES:
:Author: MultipartiteMind
:Score: 1
:DateUnix: 1538018298.0
:END:


** /Dr. Strangelove/ is a good example about a group of people trying to decommit a precommitment, and more generally, of precommitments gone awry.

Ripper precommits to bombing the Soviet Union, in an attempt to force the US to declare war on the Soviet Union. The government attempts to decommit this.

The Soviet Union has precommitted to destroying the entire world in event of attack.

Ripper commits to not giving up the radio code under torture by killing himself.
:PROPERTIES:
:Author: tjhance
:Score: 2
:DateUnix: 1537122774.0
:END:


** Try [[https://www.fimfiction.net/story/380502/displaced-into-nothing][Displaced into Nothing]]. In chapter #3, Meta is decommitting Twilight's precommitment to not let her out of the containment chamber in a very similar fashion to an 'AI in the Box' scenario.
:PROPERTIES:
:Author: xamueljones
:Score: 1
:DateUnix: 1537231280.0
:END:


** At that point you've just come full circle.
:PROPERTIES:
:Author: EthanCC
:Score: 1
:DateUnix: 1537023874.0
:END:

*** If person A gets the outcome they want by precommiting to something, and person B gets the outcome if not-that, then the final outcome if you manage to foil a precommitment is person B getting the outcome they want and person A not getting that. That's not full circle, That's person B defeating person A.
:PROPERTIES:
:Author: chlorinecrown
:Score: 4
:DateUnix: 1537024679.0
:END:

**** Describe the situation without the word "precommitment", it's exactly the same as someone foiling a plan. I don't see the point of using the word here.
:PROPERTIES:
:Author: EthanCC
:Score: 1
:DateUnix: 1537027986.0
:END:

***** The "chicken" game I pointed out in another comment seems sufficient.

I guess as a negative example, you can have a plan foiled that involves no precommitment, such as placing land mines around your sacred treasure but having your enemy come in from above?

​
:PROPERTIES:
:Author: chlorinecrown
:Score: 2
:DateUnix: 1537028751.0
:END:

****** The "precommitment" thing here is just a subset of plans being foiled, where you are trying to do something and someone stops you. I don't see how that's different from preventing a really determined person from doing something, and I don't see why you need to describe it with "precommitment" or TDT (which is a solution to certain game theory problems, and fairly niche). You /can/, but it is unnecessary and looks like unnecessarily complicated intellectual naval gazing.
:PROPERTIES:
:Author: EthanCC
:Score: 2
:DateUnix: 1537028941.0
:END:

******* The "apple" thing here is just a subset of fruits, where you are trying to eat something that grew on a tree. I don't see how that's different from eating an arbitrary fruit, and I don't see why you need to describe it with "apple". You /can/, but it is unnecessary and looks like unnecessarily complicated intellectual naval gazing.
:PROPERTIES:
:Author: chlorinecrown
:Score: 6
:DateUnix: 1537029245.0
:END:

******** The concept of apples wasn't invented to solve a very specific problem in game theory, and using the word apple doesn't make what you're saying more confusing. Words have context. The thing that started all this was EY making a joke, and you've interpreted it as something serious. To use your metaphor it's like if instead of apple I used "Falus pulima offpsring vector". "Foiling a precommitment to do X" is the same as "preventing someone from doing X".
:PROPERTIES:
:Author: EthanCC
:Score: 2
:DateUnix: 1537037597.0
:END:

********* #+begin_quote
  "Foiling a precommitment to do X" is the same as "preventing someone from doing X"
#+end_quote

Not precisely. It is more like "preventing someone from doing X /after that person has promised to do X/"

I know, it's a niggly little detail, but niggly little details can be important.
:PROPERTIES:
:Author: CCC_037
:Score: 5
:DateUnix: 1537087006.0
:END:


********* Using the word apples would be making it more confusing if you were an alien who didn't understand that there are different types of fruit, like you seem to be with precommitment and the general concept of a plan.

​

I really think you're overestimating how niche the concept of precommitment is. I think every american high schooler learns about the mutually assured destruction strategy for the cold war.

​

Why would the fact that the meme is making a joke mean that the concept couldn't be used in a story?
:PROPERTIES:
:Author: chlorinecrown
:Score: 5
:DateUnix: 1537038118.0
:END:

********** Well, the first result for "timeless decision theory" is a LW post... when EY says "precommitment" he means TDT, where to solve problems like Newcomb's problem and a prisoners dilemma you can precommit to one choice. If the other player knows this, they know what you will do. This lets you cooperate in situations two rational players normally wouldn't risk cooperation in (ie prisoners dilemma), since knowing the other's state ahead of time would let you "cheat" on the problem. That is the niche I mean- even if the concept is more well know the vocab isn't which is one of man problems LW has. It's also a losing move on some other problems.

The idea is specifically for a way for two people to cooperate across time, without having to communicate. This also works between you and your future self, since obviously you can't communicate with your future self. It's not useful, and is in fact a hindrance, when it comes to two players in conflict. Which is why I think you may as well just say it's someone foiling a plan, since if you /are/ using precommitment here you're not acting very rationally- you've told your competition what you're going to do.
:PROPERTIES:
:Author: EthanCC
:Score: 1
:DateUnix: 1537052149.0
:END:

*********** #+begin_quote
  since if you are using precommitment here you're not acting very rationally- you've told your competition what you're going to do.
#+end_quote

I think you're missing what precommittment is in this context. We're talking about plans where committing to something and telling your opponent you've committed to it /is essential to the plan./ Here, committing does not just mean you've made a pinky promise, it means you've set things up so that you have no other choice but to do the thing you promised to do, so you couldn't not do it even if you wanted to. So foiling your plan specifically involves then "decommitting" you by giving you another option. So it is more specific than just foiling a generic plan.

There's a good example about the game of chicken elsewhere in this thread.
:PROPERTIES:
:Author: tjhance
:Score: 5
:DateUnix: 1537136955.0
:END:

************ [[https://wiki.lesswrong.com/wiki/Timeless_decision_theory]]

This is what I'm talking about.
:PROPERTIES:
:Author: EthanCC
:Score: 1
:DateUnix: 1537193430.0
:END:

************* I think we know what TDT is, however the concept of "precommitment" doesn't only materialise within TDT and is a useful strategy in general.
:PROPERTIES:
:Score: 1
:DateUnix: 1537215251.0
:END:


*********** [[https://www.reddit.com/r/rational/comments/9g0j1w/any_stories_where_a_superior_decision_theorist/e60sg5n/][This explains what "decommitting a precommitment" means]])
:PROPERTIES:
:Score: 1
:DateUnix: 1537182431.0
:END:
